import os
from torch.utils.data import Dataset, DataLoader
import numpy as np
from symbols import symbols
import librosa

_symbol_to_id = {s: i for i, s in enumerate(symbols)}



def _symbols_to_sequence(symbols):
  return [_symbol_to_id[s] for s in symbols if _should_keep_symbol(s)]


def _should_keep_symbol(s):
 return s in _symbol_to_id and s is not '_' and s is not '~'


def text_to_seq(text):
 sequence = []

 sequence +=_symbols_to_sequence(text)




class CMUarctic(Dataset):

    def __init__(self, txt_file, wav_dir):
        print("am in the function")
        self.txt_file = txt_file.read()
        self.wav_dir = wav_dir

    def load_wav(self, filename):
        print("loading wavefile")
        return librosa.load(filename, sr=16000)

    def __len__(self):
        print("len is:", len(self.txt_file))
        return len(self.txt_file)

    def __getitem__(self, idx):
#        wav_name = os.path.join(self.root_dir, self.landmarks_frame.ix[idx, 0]) + '.wav'
#        text = self.landmarks_frame.ix[idx, 1]
        print(" am in get item")
        text = np.asarray(text_to_seq(self.txt_file))
        print("got text")
#        text = np.asarray(text_to_seq(self.txt_file), dtype=np.int32)
        wav = np.asarray(self.load_wav(files), dt)
        print("loaded wavfile")
        sample = {'text': text, 'wav': wav}
        print("sample is:", sample)
        return sample


text_file = open('/home3/srallaba/projects/siri_expts/Tacotron/expts_20may2019/Data/txt.done.data')
folder = '/home3/srallaba/projects/siri_expts/Tacotron/expts_20may2019/Data/orig_wav'
os.chdir(folder)
files = sorted(os.listdir(folder))

datas = CMUarctic(text_file, files)
train_loader = DataLoader(dataset = datas, batch_size=4, shuffle=True)
for i in train_loader:
   print(i)
